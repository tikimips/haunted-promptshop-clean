import { NextRequest, NextResponse } from 'next/server';
import { Anthropic } from '@anthropic-ai/sdk';

export async function POST(req: NextRequest) {
  try {
    // Check if we're in test mode
    if (process.env.TEST_MODE === 'true') {
      console.log('TEST_MODE enabled - returning mock response');
      const body = await req.json();
      const { name } = body;
      
      return NextResponse.json({
        id: crypto.randomUUID(),
        title: name || "Test Image",
        author: "Test Mode",
        description: "Mock response for testing",
        imageUrl: "https://via.placeholder.com/400x300",
        promptText: "Modern minimalist design with clean lines, professional typography, and subtle color palette. Focus on white space and elegant composition.",
        favorite: false,
        createdAt: new Date().toISOString(),
      });
    }

    // Debug logging
    console.log('=== Claude API Debug Start ===');
    console.log('API Key exists:', !!process.env.ANTHROPIC_API_KEY);
    console.log('API Key prefix:', process.env.ANTHROPIC_API_KEY?.substring(0, 10) + '...');
    
    // Parse JSON data
    const body = await req.json();
    const { name, image } = body;

    console.log('Request body received:', { 
      name, 
      hasImage: !!image,
      imageLength: image?.length 
    });

    if (!image) {
      console.error('No image provided in request body');
      return NextResponse.json({ error: "No image provided" }, { status: 400 });
    }

    if (!process.env.ANTHROPIC_API_KEY) {
      console.error('ANTHROPIC_API_KEY environment variable not set');
      return NextResponse.json({ error: "Anthropic API key not configured" }, { status: 500 });
    }

    // Validate API key format
    if (!process.env.ANTHROPIC_API_KEY.startsWith('sk-ant-')) {
      console.error('Invalid API key format - should start with sk-ant-');
      return NextResponse.json({ error: "Invalid API key format" }, { status: 500 });
    }

    // Initialize Anthropic client
    const anthropic = new Anthropic({
      apiKey: process.env.ANTHROPIC_API_KEY,
    });

    // Convert base64 image data
    console.log('Processing base64 image data...');
    const base64Data = image.split(',')[1]; // Remove data:image/type;base64, prefix
    const mediaType = image.split(';')[0].split(':')[1] as "image/jpeg" | "image/png" | "image/gif" | "image/webp";
    
    console.log('Image processed:', {
      base64Length: base64Data.length,
      mediaType: mediaType,
      estimatedSizeKB: Math.round(base64Data.length * 0.75 / 1024)
    });

    // Make API call to Claude
    console.log('Making API call to Claude...');
    const response = await anthropic.messages.create({
      model: "claude-3-haiku-20240307", // Latest stable model
      max_tokens: 300,
      messages: [
        {
          role: "user",
          content: [
            {
              type: "text",
              text: "Analyze this image and create a detailed AI art generation prompt. Focus on visual style, composition, colors, mood, and artistic elements. Return only the prompt text - no quotes, explanations, or extra formatting."
            },
            {
              type: "image",
              source: {
                type: "base64",
                media_type: mediaType,
                data: base64Data
              }
            }
          ]
        }
      ]
    });

    console.log('Claude API response received:', {
      hasContent: !!response.content,
      contentLength: response.content?.length,
      contentType: response.content?.[0]?.type
    });

    const promptText = response.content[0]?.type === 'text' ? response.content[0].text.trim() : '';
    
    if (!promptText) {
      console.error('Claude returned empty or invalid content');
      return NextResponse.json({ error: "Failed to generate prompt" }, { status: 500 });
    }

    const result = {
      id: crypto.randomUUID(),
      title: name || "Untitled",
      author: "AI Generated",
      description: "Generated by Claude from uploaded image",
      imageUrl: image, // Use the original data URL
      promptText: promptText,
      favorite: false,
      createdAt: new Date().toISOString(),
    };

    console.log('Success! Returning result with prompt length:', promptText.length);
    console.log('=== Claude API Debug End ===');
    
    return NextResponse.json(result);

  } catch (error: any) {
    console.error('=== Claude API Error ===');
    console.error('Error type:', error.constructor.name);
    console.error('Error message:', error.message);
    console.error('Error status:', error.status);
    console.error('Full error:', error);
    console.error('=== End Error Debug ===');
    
    // Return more specific error messages
    if (error.status === 401) {
      return NextResponse.json({ error: "Invalid API key" }, { status: 401 });
    } else if (error.status === 429) {
      return NextResponse.json({ error: "Rate limit exceeded" }, { status: 429 });
    } else if (error.message?.includes('Invalid base64')) {
      return NextResponse.json({ error: "Invalid image format" }, { status: 400 });
    } else {
      return NextResponse.json({ 
        error: "Failed to analyze image", 
        details: error.message 
      }, { status: 500 });
    }
  }
}