// app/api/generate-prompt/route.ts
import { NextResponse } from "next/server";
import Anthropic from "@anthropic-ai/sdk";

async function fileToBase64(file: File): Promise<string> {
  const bytes = await file.arrayBuffer();
  const buffer = Buffer.from(bytes);
  const base64 = buffer.toString('base64');
  return base64;
}

export async function POST(req: Request) {
  try {
    // Test mode - set this to true to avoid API calls
    const TEST_MODE = process.env.TEST_MODE === 'true' || process.env.NODE_ENV === 'development';
    
    console.log("API Key exists:", !!process.env.ANTHROPIC_API_KEY);
    console.log("Test mode:", TEST_MODE);
    
    const form = await req.formData();
    const name = (form.get("name") as string) || "Untitled";
    const image = form.get("image") as File | null;

    console.log("Form data:", { name, hasImage: !!image });

    if (!image) {
      return new NextResponse("No image provided", { status: 400 });
    }

    const base64Data = await fileToBase64(image);
    const now = new Date().toISOString();

    // Test mode - return mock data without API call
    if (TEST_MODE) {
      console.log("Using test mode - returning mock data");
      return NextResponse.json({
        id: crypto.randomUUID(),
        title: name,
        author: "Test Generated",
        description: "Test prompt generated without API call.",
        imageUrl: `data:${image.type};base64,${base64Data}`,
        promptText: "Create a modern, minimalist dashboard design with clean typography, subtle shadows, and a professional color palette featuring blues and grays.",
        favorite: false,
        createdAt: now,
      });
    }

    if (!process.env.ANTHROPIC_API_KEY) {
      return new NextResponse("Anthropic API key not configured", { status: 500 });
    }

    const anthropic = new Anthropic({
      apiKey: process.env.ANTHROPIC_API_KEY,
    });

    console.log("Base64 created, length:", base64Data.length);

    const response = await anthropic.messages.create({
      model: "claude-3-haiku-20240307",
      max_tokens: 200,
      messages: [
        {
          role: "user",
          content: [
            {
              type: "text",
              text: "Analyze this image and produce a clean, reusable prompt for a generative AI UI. Return only the prompt text (no quotes, no bullets, no preamble). The prompt should be specific and self-contained."
            },
            {
              type: "image",
              source: {
                type: "base64",
                media_type: image.type as "image/jpeg" | "image/png" | "image/gif" | "image/webp",
                data: base64Data
              }
            }
          ]
        }
      ]
    });

    const promptText = response.content[0]?.type === 'text' ? response.content[0].text.trim() : '';
    if (!promptText) throw new Error("Model returned empty content.");

    return NextResponse.json({
      id: crypto.randomUUID(),
      title: name,
      author: "AI Generated",
      description: "Generated by Claude from your image.",
      imageUrl: `data:${image.type};base64,${base64Data}`,
      promptText: promptText,
      favorite: false,
      createdAt: now,
    });
  } catch (err: any) {
    console.error("Claude API Error:", err);
    return new NextResponse(err?.message || "Failed to generate", { status: 500 });
  }
}