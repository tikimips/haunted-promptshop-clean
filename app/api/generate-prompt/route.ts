// app/api/generate-prompt/route.ts
import { NextResponse } from "next/server";
import OpenAI from "openai";

// Remove edge runtime to use Node.js runtime instead
// export const runtime = "edge";

function toDataUrl(file: File) {
  return new Promise<string>((resolve, reject) => {
    const reader = new FileReader();
    reader.onerror = () => reject(new Error("Failed to read file"));
    reader.onload = () => resolve(reader.result as string);
    reader.readAsDataURL(file);
  });
}

export async function POST(req: Request) {
  try {
    const form = await req.formData();
    const name = (form.get("name") as string) || "Untitled";
    const image = form.get("image") as File | null;

    if (!image) {
      return new NextResponse("No image provided", { status: 400 });
    }

    const client = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

    const dataUrl = await toDataUrl(image);

    const chat = await client.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        {
          role: "user",
          content: [
            {
              type: "text",
              text: "Analyze this image and produce a clean, reusable prompt for a generative AI UI. Return only the prompt text (no quotes, no bullets, no preamble). The prompt should be specific and self-contained."
            },
            {
              type: "image_url",
              image_url: { url: dataUrl }
            }
          ]
        }
      ],
      temperature: 0.3,
      max_tokens: 200
    });

    const promptText = (chat.choices?.[0]?.message?.content || "").trim();
    if (!promptText) throw new Error("Model returned empty content.");

    const now = new Date().toISOString();

    return NextResponse.json({
      id: crypto.randomUUID(),
      title: name,
      author: "AI Generated",
      description: "Generated by OpenAI from your image.",
      imageUrl: dataUrl,
      promptText: promptText,
      favorite: false,
      createdAt: now,
    });
  } catch (err: any) {
    console.error("OpenAI API Error:", err);
    return new NextResponse(err?.message || "Failed to generate", { status: 500 });
  }
}